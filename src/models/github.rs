// Generated by Github Copilot
use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct Language {
    pub name: String,
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_code_suggestions: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_code_acceptances: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_code_lines_suggested: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_code_lines_accepted: Option<i64>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct Model {
    pub name: String,
    pub is_custom_model: bool,
    pub custom_model_training_date: Option<String>,
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<Language>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_chats: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_chat_insertion_events: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_chat_copy_events: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_pr_summaries_created: Option<i64>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct Editor {
    pub name: String,
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub models: Option<Vec<Model>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct Repository {
    pub name: String,
    pub total_engaged_users: i64,
    pub models: Vec<Model>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct CopilotIdeCodeCompletions {
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<Language>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editors: Option<Vec<Editor>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct CopilotIdeChat {
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editors: Option<Vec<Editor>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct CopilotDotcomChat {
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub models: Option<Vec<Model>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct CopilotDotcomPullRequests {
    pub total_engaged_users: i64,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<Repository>>,
}

/// GitHub Data Models
///
/// This module defines the data structures that represent GitHub Copilot metrics.
///
/// The primary structures include:
/// - `CopilotMetrics`: The top-level container for all metrics
/// - `CopilotIdeCodeCompletions`: Metrics for IDE code completions
/// - `CopilotIdeChat`: Metrics for IDE chat interactions
/// - `CopilotDotcomChat`: Metrics for GitHub.com chat interactions
/// - `CopilotDotcomPullRequests`: Metrics for GitHub.com pull request interactions

/// Represents a complete set of GitHub Copilot metrics
///
/// This is the top-level structure that contains all metrics data
/// retrieved from the GitHub API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CopilotMetrics {
    /// ISO date for these metrics (YYYY-MM-DD)
    pub date: String,

    /// Total number of users who have activated Copilot
    pub total_active_users: Option<i64>,

    /// Total number of users who have used Copilot
    pub total_engaged_users: Option<i64>,

    /// Metrics related to code completions in IDEs
    pub copilot_ide_code_completions: Option<CopilotIdeCodeCompletions>,

    /// Metrics related to chat in IDEs
    pub copilot_ide_chat: Option<CopilotIdeChat>,

    /// Metrics related to chat on GitHub.com
    pub copilot_dotcom_chat: Option<CopilotDotcomChat>,

    /// Metrics related to pull requests on GitHub.com
    pub copilot_dotcom_pull_requests: Option<CopilotDotcomPullRequests>,
}

// Generated Code by Github Copilot ends here
